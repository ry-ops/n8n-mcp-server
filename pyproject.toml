[project]
name = "n8n-mcp-server"
version = "1.0.0"
description = "Model Context Protocol server for n8n API integration"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "ry-ops" }
]
maintainers = [
    { name = "ry-ops" }
]
keywords = [
    "n8n",
    "mcp",
    "model-context-protocol",
    "workflow-automation",
    "api-integration",
    "claude",
    "ai-tools"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Workflow",
    "Framework :: AsyncIO",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
dependencies = [
    "mcp>=1.1.2",
    "httpx>=0.27.0",
]

[project.urls]
Homepage = "https://github.com/ry-ops/n8n-mcp-server"
Repository = "https://github.com/ry-ops/n8n-mcp-server"
Issues = "https://github.com/ry-ops/n8n-mcp-server/issues"
Changelog = "https://github.com/ry-ops/n8n-mcp-server/blob/main/CHANGELOG.md"
Documentation = "https://github.com/ry-ops/n8n-mcp-server/blob/main/README.md"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "safety>=3.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W"]
ignore = ["E501"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = [
    "--cov=src/n8n_mcp_server",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-v"
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[project.scripts]
n8n-mcp-server = "n8n_mcp_server:main"
